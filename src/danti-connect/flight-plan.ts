/**
 * ## Notices
 * Copyright 2019 United States Government as represented by the Administrator 
 * of the National Aeronautics and Space Administration. All Rights Reserved.
 * 
 * ## Disclaimers
 * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY KIND, 
 * EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY 
 * THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF 
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, 
 * ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT 
 * DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, 
 * IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT 
 * OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS 
 * RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY DISCLAIMS 
 * ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE 
 * ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
 * 
 * Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE 
 * UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR 
 * RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, 
 * DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES 
 * FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT SOFTWARE, 
 * RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED STATES GOVERNMENT, 
 * ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT 
 * PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, 
 * UNILATERAL TERMINATION OF THIS AGREEMENT.
 */

/**
 * Sends a flight plan to danti-display
 * When using a .daa file as input, the flight plan is generated by picking 3 waypoints from the .daa file
 */
import { DantiConnection } from "./danti-connection";
import * as fsUtils from "../daa-server/utils/fsUtils";
import * as path from "path";
import { exit } from "process";

// list of scenario file names
const fileNames: { [ name: string ]: string }  = {
    centennial: "Centenial_N416DJ_own_maneuver.daa", // virtual pilot
    "centennial-accident": "Centenial_N416DJ_own.daa",
    "centennial-accident-short": "Centenial_N416DJ_own_short.daa"
}

// get args from command line
const args: string[] = process.argv?.slice(2);
console.log('args: ', args);

if (args?.length > 0) {
    // load file
    const baseFolder: string = 
        (args[0].endsWith(".daa") || fileNames[args[0]]) ? "daa-scenarios" : "../";
    const fileName: string = 
        (args[0].endsWith(".daa")) ? args[0] : fileNames[args[0]];
    console.log({ baseFolder, fileName });
    const fname: string = path.join(__dirname, baseFolder, fileName);
    console.log(`[flight-plane] Opening file ${fileName}`)
    const fileContent: string = fsUtils.readFile(fname);
    const lines: string[] = fileContent?.split("\n");
    let flightPlan: string[] = fname.endsWith(".daa") ? [] : lines;
    if (fname.endsWith(".daa") && lines?.length > 2) {
        // for simplicity, we assume the aircraft name is the first column
        const colName: number = 0;
        const ownshipName: string = lines[2].split(" ")[colName];
        if (fname.endsWith(".daa")) {
            let waypointId: number = 1;
            // pick 3 waypoints
            const waypoints: string[] = lines.filter(line => {
                return line.startsWith(ownshipName) && line.split(",").length >= 4;
            }).map(line => {
                // for simplicity, we assume the first columns contain NAME lat lon alt
                const elems: string[] = line.split(',');
                return `Waypoint ${waypointId++}, ${elems[1]}, ${elems[2]}, ${elems[3]}`
            });
            console.log(`** ${waypoints.length} available waypoints **`, waypoints);
            flightPlan = [
                waypoints[0],
                waypoints[parseInt(`${waypoints.length / 2}`)],
                waypoints[waypoints.length - 1]
            ];
        }
    }
    console.log("\n** flight plan **", flightPlan);
    // create data source instance
    const daaDataSource: DantiConnection = new DantiConnection();
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    daaDataSource.activate().then((success: boolean) => {
        daaDataSource.sendFlightPlan(flightPlan.join("\n"));
        exit(0);
    });
} else {
    console.log("Nothing to do, please specify a flight plan, e.g., make flight-plan file=Centenial_N416DJ_own_maneuver.daa")
}